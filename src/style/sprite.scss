/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$facebook-hover-name: 'facebook-hover';
$facebook-hover-x: 0px;
$facebook-hover-y: 0px;
$facebook-hover-offset-x: 0px;
$facebook-hover-offset-y: 0px;
$facebook-hover-width: 47px;
$facebook-hover-height: 47px;
$facebook-hover-total-width: 47px;
$facebook-hover-total-height: 376px;
$facebook-hover-image: 'sprite.png';
$facebook-hover: (0px, 0px, 0px, 0px, 47px, 47px, 47px, 376px, 'sprite.png', 'facebook-hover', );
$facebook-name: 'facebook';
$facebook-x: 0px;
$facebook-y: 47px;
$facebook-offset-x: 0px;
$facebook-offset-y: -47px;
$facebook-width: 47px;
$facebook-height: 47px;
$facebook-total-width: 47px;
$facebook-total-height: 376px;
$facebook-image: 'sprite.png';
$facebook: (0px, 47px, 0px, -47px, 47px, 47px, 47px, 376px, 'sprite.png', 'facebook', );
$gihtub-hover-name: 'gihtub-hover';
$gihtub-hover-x: 0px;
$gihtub-hover-y: 94px;
$gihtub-hover-offset-x: 0px;
$gihtub-hover-offset-y: -94px;
$gihtub-hover-width: 47px;
$gihtub-hover-height: 47px;
$gihtub-hover-total-width: 47px;
$gihtub-hover-total-height: 376px;
$gihtub-hover-image: 'sprite.png';
$gihtub-hover: (0px, 94px, 0px, -94px, 47px, 47px, 47px, 376px, 'sprite.png', 'gihtub-hover', );
$gihtub-name: 'gihtub';
$gihtub-x: 0px;
$gihtub-y: 141px;
$gihtub-offset-x: 0px;
$gihtub-offset-y: -141px;
$gihtub-width: 47px;
$gihtub-height: 47px;
$gihtub-total-width: 47px;
$gihtub-total-height: 376px;
$gihtub-image: 'sprite.png';
$gihtub: (0px, 141px, 0px, -141px, 47px, 47px, 47px, 376px, 'sprite.png', 'gihtub', );
$tw-hover-name: 'tw-hover';
$tw-hover-x: 0px;
$tw-hover-y: 188px;
$tw-hover-offset-x: 0px;
$tw-hover-offset-y: -188px;
$tw-hover-width: 47px;
$tw-hover-height: 47px;
$tw-hover-total-width: 47px;
$tw-hover-total-height: 376px;
$tw-hover-image: 'sprite.png';
$tw-hover: (0px, 188px, 0px, -188px, 47px, 47px, 47px, 376px, 'sprite.png', 'tw-hover', );
$tw-name: 'tw';
$tw-x: 0px;
$tw-y: 235px;
$tw-offset-x: 0px;
$tw-offset-y: -235px;
$tw-width: 47px;
$tw-height: 47px;
$tw-total-width: 47px;
$tw-total-height: 376px;
$tw-image: 'sprite.png';
$tw: (0px, 235px, 0px, -235px, 47px, 47px, 47px, 376px, 'sprite.png', 'tw', );
$vk-hover-name: 'vk-hover';
$vk-hover-x: 0px;
$vk-hover-y: 282px;
$vk-hover-offset-x: 0px;
$vk-hover-offset-y: -282px;
$vk-hover-width: 47px;
$vk-hover-height: 47px;
$vk-hover-total-width: 47px;
$vk-hover-total-height: 376px;
$vk-hover-image: 'sprite.png';
$vk-hover: (0px, 282px, 0px, -282px, 47px, 47px, 47px, 376px, 'sprite.png', 'vk-hover', );
$vk-name: 'vk';
$vk-x: 0px;
$vk-y: 329px;
$vk-offset-x: 0px;
$vk-offset-y: -329px;
$vk-width: 47px;
$vk-height: 47px;
$vk-total-width: 47px;
$vk-total-height: 376px;
$vk-image: 'sprite.png';
$vk: (0px, 329px, 0px, -329px, 47px, 47px, 47px, 376px, 'sprite.png', 'vk', );
$spritesheet-width: 47px;
$spritesheet-height: 376px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($facebook-hover, $facebook, $gihtub-hover, $gihtub, $tw-hover, $tw, $vk-hover, $vk, );
$spritesheet: (47px, 376px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../images/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
